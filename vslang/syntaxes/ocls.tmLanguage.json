{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "OcellusScript",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#funcs"
		},
		{
			"include": "#vars"
		}
	],
	"repository": {
		"comments": {
			"patterns": [{
				"name": "comment.line.number-sign.ocls",
				"begin": "#",
				"end": "\\n"
			},
			{
				"name": "comment.block.documentation.ocls",
				"begin": "```",
				"end": "```"
			}]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ocls",
					"match": "\\b(takes|returns|return|import|match)\\b"
				},
				{
					"name": "keyword.operator.ocls",
					"match": "\\b(and|or|not)\\b"
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"match": "\\b(class|type|module)\\s+(\\w+)+\\b",
					"captures": {
						"1": {
							"name": "storage.type.ocls"
						},
						"2": {
							"name": "entity.name.type.ocls"
						}
					}
				},
				{
					"match": "\\b(shadowtype)\\s+(\\w+)\\s+=\\s+(String|Integer|Char|Boolean|Float|Callable|Anything|Nothing);",
					"captures": {
						"1": {
							"name": "storage.type.ocls"
						},
						"2": {
							"name": "entity.name.type.ocls"
						},
						"3": {
							"name": "constant.language.ocls"
						}
					}
				},
				{
					"begin": "\\b(var)\\s+(\\w+)+\\s+",
					"end": "=",
					"captures": {
						"1": {
							"name": "storage.type.ocls"
						},
						"2": {
							"name": "variable.other.readwrite.ocls"
						}
					}
				},
				{
					"begin": "\\b(let)\\s+(\\w+)+\\s+",
					"end": "=",
					"captures": {
						"1": {
							"name": "storage.type.ocls"
						},
						"2": {
							"name": "variable.other.constant.ocls"
						}
					}
				},
				{
					"name": "storage.type.ocls",
					"match": "\\b(private)\\b"
				},
				{
					"begin": "(func)\\s+(\\w+)\\s+(takes)",
					"end": "\\s+",
					"beginCaptures": {
						"1": {
							"name": "storage.type.ocls"
						},
						"2": {
							"name": "entity.name.function.ocls"
						},
						"3": {
							"name": "keyword.control.ocls"
						}
					}
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.ocls",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ocls",
					"match": "\\\\."
				}
			]
		},
		"vars": {
			"patterns": [
				{
					"name": "variable.language.ocls",
					"match": "\\b(self|super)\\b"
				},
				{
					"begin": "(func)\\s+(\\w+)\\s+\\=\\s+\\((\\w+(,\\s\\w+)*)\\)",
					"end": "\\s+\\=",
					"beginCaptures": {
						"1": {
							"name": "storage.type.ocls"
						},
						"2": {
							"name": "entity.name.function.ocls"
						},
						"3": {
							"name": "variable.parameter.ocls"
						}
					}
				},
				{
					"match": "\\b([A-Z][\\w+]+)\\(",
					"captures": {
						"1": {
							"name": "entity.name.type.ocls"
						}
					}
				},
				{
					"name": "constant.numeric.ocls",
					"match": "\\b([0-9])+\\b"
				},
				{
					"name": "constant.language.ocls",
					"match": "\\b(String|Char|Integer|Float|List|Callable|Boolean|true|false)\\b"
				}
			]
		},
		"funcs": {
			"patterns": [
				{
					"begin": "(lambda)\\s+(\\w+)",
					"end": "\\:",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.ocls"
						},
						"2": {
							"name": "variable.parameter.ocls"
						}
					}
				}
			]
		}
	},
	"scopeName": "source.ocls"
}